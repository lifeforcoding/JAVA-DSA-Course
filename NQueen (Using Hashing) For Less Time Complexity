import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class Practice {
    public static void main(String[] args) {
        int n = 4;
        List<List<String>> queen = solveNQueens(n);
        int i = 1;
        for (List<String> it: queen) {
            System.out.println("Arrangement" + i);
            for (String s : it)
                System.out.print(s + " \n");
            System.out.println();
            i++;
        }
    }

    public static List<List<String>> solveNQueens(int n) {
            char[][] board = new char[n][n];
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board.length; j++)
                    board[i][j] = '.';
            }
            List <List <String>> ans = new ArrayList<>();
            int[] leftRow = new int[board.length];
            int[] lowerDiagonal = new int[2 * board.length - 1];
            int[] upperDiagonal = new int[2 * board.length - 1];
            dfs(0, board, ans, leftRow, lowerDiagonal, upperDiagonal);
            return ans;
        }

        public static void dfs(int col, char[][] board, List<List<String>> ans, int[] leftRow, int[] lowerDiagonal, int[] upperDiagonal) {
            if (col == board.length) {
                ans.add(construct(board));
                return;
            }
            for (int row = 0; row < board.length; row++) {
                if (leftRow[row] == 0 && lowerDiagonal[col + row] == 0 && upperDiagonal[board.length - 1 + col - row] == 0) {
                    board[row][col] = 'Q';
                    leftRow[row] = 1;
                    lowerDiagonal[col + row] = 1;
                    upperDiagonal[board.length - 1 + col - row] = 1;
                    dfs(col + 1, board, ans, leftRow, lowerDiagonal, upperDiagonal);
                    board[row][col] = '.';
                    leftRow[row] = 0;
                    lowerDiagonal[col + row] = 0;
                    upperDiagonal[board.length - 1 + col - row] = 0;
                }
            }
        }

        private static List<String> construct(char[][] board) {
            List<String> res = new LinkedList<>();
            for (char[] chars : board) {
                String s = new String(chars);
                res.add(s);
            }
            return res;
        }
}
