import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class Practice {
    public static void main(String[] args) {
        int n = 4;
        List<List<String>> queen = solveNQueens(n);
        int i = 1;
        for (List<String> it: queen) {
            System.out.println("Arrangement" + i);
            for (String s : it)
                System.out.print(s);
            System.out.println();
            i++;
        }
    }

    public static List<List<String>> solveNQueens(int n) {
            char[][] board = new char[n][n];
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board.length; j++)
                    board[i][j] = '.';
            }
            List <List <String>> ans = new ArrayList<>();
            dfs(0, board, ans);
            return ans;
        }

        public static void dfs(int col, char[][] board, List<List<String>> ans) {
            if (col == board.length) {
                ans.add(construct(board));
                return;
            }
            for (int row = 0; row < board.length; row++) {
                if (isSafe(board, row, col)) {
                    board[row][col] = 'Q';
                    dfs(col + 1, board, ans);
                    board[row][col] = '.';
                }
            }
        }

        private static List<String> construct(char[][] board) {
            List<String> res = new LinkedList<>();
            for (char[] chars : board) {
                String s = new String(chars);
                res.add(s);
            }
            return res;
        }
        public static boolean isSafe(char[][] board, int row, int col) {
            int tempRow = row;
            int tempCol = col;
            //Checking Diagonally Upward Possibilities.
            while (row >= 0 && col >= 0) {
                if (board[row][col] == 'Q')
                    return false;
                row--;
                col--;
            }
            row = tempRow;
            col = tempCol;
            //Checking Possibilities to back.
            while (col >= 0) {
                if (board[row][col] == 'Q')
                    return false;
                col--;
            }
            col = tempCol;
            //Checking Diagonally downward Possibilities.
            while (row < board.length && col >= 0) {
                if (board[row][col] == 'Q')
                    return false;
                row++;
                col--;
            }
            return true;
        }
}
